getTileFile tile1 inp1;
getTileFile tile2 inp2;
getTileFile tile3 inp3;

blankTile = createBlankTile(inp1);

-- First tile
i = 0;
firstTile = combineTilesRight(blankTile, blankTile);
while (i < 19) {
	firstTile = combineTilesRight(firstTile, inp1);
	firstTile = combineTilesRight(firstTile, inp2);
	firstTile = combineTilesRight(firstTile, inp3);
	i = i + 1;	
};
firstTile = combineTilesRight(firstTile, inp1);

-- Second Tile
i = 0;
secondTile = blankTile;
while (i < 19) {
	secondTile = combineTilesRight(secondTile, inp2);
	secondTile = combineTilesRight(secondTile, inp3);
	secondTile = combineTilesRight(secondTile, inp1);
	i = i + 1;	
};
secondTile = combineTilesRight(secondTile, inp2);
secondTile = combineTilesRight(secondTile, inp3);

mainTile = combineTilesDown(firstTile, secondTile);

j = 1;
while (i < 55) {
	if (j==1) {
		tempTile = combineTilesRight(inp3, inp1)
		tempTile = combineTilesRight(tempTile, inp2);
		k=0;
		while (k<19) {
			tempTile = combineTilesRight(tempTile, inp3);	
			tempTile = combineTilesRight(tempTile, inp1);	
			tempTile = combineTilesRight(tempTile, inp2);	
		} else {doNothing};
		mainTile = combineTilesDown(mainTile, tempTile); 
	};

	if (j==2) {
		tempTile = combineTilesRight(inp2, inp3)
		tempTile = combineTilesRight(tempTile, inp1);
		k=0;
		while (k<19) {
			tempTile = combineTilesRight(tempTile, inp2);	
			tempTile = combineTilesRight(tempTile, inp3);	
			tempTile = combineTilesRight(tempTile, inp1);	
		};
		mainTile = combineTilesDown(mainTile, tempTile); 
	} else {doNothing};

	if (j==3) {
		tempTile = combineTilesRight(inp1, inp2)
		tempTile = combineTilesRight(tempTile, inp3);
		k=0;
		while (k<19) {
			tempTile = combineTilesRight(tempTile, inp1);	
			tempTile = combineTilesRight(tempTile, inp2);	
			tempTile = combineTilesRight(tempTile, inp3);	
		}else {doNothing};
		mainTile = combineTilesDown(mainTile, tempTile); 
		j=0;
	}else {doNothing};
	j=j+1;
	i=i+1;
};

-- Second last tile
secondLastTile = combineTilesRight(inp1, inp2);
k=0;
while (k<19) {
	secondLastTile = combineTilesRight(secondLastTile, inp3);	
	secondLastTile = combineTilesRight(secondLastTile, inp1);	
	secondLastTile = combineTilesRight(secondLastTile, inp2);	
};
secondLastTile = combineTilesRight(secondLastTile, blankTile);
secondLastTile = combineTilesRight(secondLastTile, blankTile);

-- Last tile
lastTile = combineTilesRight(inp3, inp1);
lastTile = combineTilesRight(lastTile, inp2);
k=0;
while (k<19) {
	lastTile = combineTilesRight(lastTile, inp3);	
	lastTile = combineTilesRight(lastTile, inp1);	
	lastTile = combineTilesRight(lastTile, inp2);	
};
lastTile = combineTilesRight(lastTile, blankTile);

mainTile = combineTilesDown(mainTile, secondLastTile);
mainTile = combineTilesDown(mainTile, lastTile);

return mainTile;

--question6 inp1 inp2 inp3 = prettyPrint $ foldl combineTilesDown (Tile [""]) (map (foldl combineTilesRight (createBlankTile inp1)) allLinesTiles)
--        where
--                blankTile = createBlankTile inp1
--                firstLine = [0 : 0 : take 58 (cycle [1,2,3])]
--                secondLine = [0 : take 59 (cycle [2,3,1])]
--                secondLastLine = [take 59 (cycle [1,2,3]) ++ [0]]
--                lastLine = [take 58 (cycle [3,1,2]) ++ [0,0]]
--                middleLines = map makeLine (take 56 (cycle [1,2,3]))
--                makeLine num
--                  | num==1 = take 60 (cycle[3,1,2])
--                  | num==2 = take 60 (cycle[2,3,1])
--                  | otherwise = take 60 (cycle[1,2,3])
--                allLines = firstLine ++ secondLine ++ middleLines ++ secondLastLine ++ lastLine
--                allLinesTiles = map (map (\x -> if x==1 then inp1 else if x==2 then inp2 else if x==3 then inp3 else blankTile)) allLines
